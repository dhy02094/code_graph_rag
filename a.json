{
  "project_path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard",
  "files": {
    "src\\main\\java\\com\\example\\gpu_dashboard\\Application.java": {
      "package": "com.example.gpu_dashboard",
      "imports": [
        "org.springframework.boot.SpringApplication",
        "org.springframework.boot.autoconfigure.SpringBootApplication",
        "org.springframework.boot.autoconfigure.domain.EntityScan",
        "org.springframework.data.jpa.repository.config.EnableJpaRepositories",
        "org.springframework.scheduling.annotation.EnableScheduling"
      ],
      "classes": [
        {
          "name": "Application",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "main",
              "return_type": null,
              "parameters": [
                {
                  "name": "args",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"spring.profiles.active\"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"dev\")], member=setProperty, postfix_operators=[], prefix_operators=[], qualifier=System, selectors=[], type_arguments=None), label=None)",
                "StatementExpression(expression=MethodInvocation(arguments=[ClassReference(postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=Application, sub_type=None)), MemberReference(member=args, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=run, postfix_operators=[], prefix_operators=[], qualifier=SpringApplication, selectors=[], type_arguments=None), label=None)"
              ],
              "description": null
            }
          ],
          "fields": []
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\Application.java",
      "dependencies": [
        {
          "type": "import",
          "target": "org.springframework.boot.SpringApplication"
        },
        {
          "type": "import",
          "target": "org.springframework.boot.autoconfigure.SpringBootApplication"
        },
        {
          "type": "import",
          "target": "org.springframework.boot.autoconfigure.domain.EntityScan"
        },
        {
          "type": "import",
          "target": "org.springframework.data.jpa.repository.config.EnableJpaRepositories"
        },
        {
          "type": "import",
          "target": "org.springframework.scheduling.annotation.EnableScheduling"
        }
      ]
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\config\\K8sConfig.java": {
      "package": "com.example.gpu_dashboard.config",
      "imports": [
        "io.kubernetes.client.openapi.ApiClient",
        "io.kubernetes.client.openapi.apis.CoreV1Api",
        "io.kubernetes.client.util.ClientBuilder",
        "io.kubernetes.client.util.KubeConfig",
        "org.springframework.beans.factory.annotation.Value",
        "org.springframework.context.annotation.Bean",
        "org.springframework.context.annotation.Configuration",
        "org.springframework.core.io.ClassPathResource",
        "java.io.FileReader",
        "java.io.IOException",
        "java.io.InputStreamReader"
      ],
      "classes": [
        {
          "name": "K8sConfig",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "coreV1Api",
              "return_type": "CoreV1Api",
              "parameters": [],
              "code": [
                "LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=None, name=client)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ApiClient, sub_type=None))",
                "TryStatement(block=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=client, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=cluster, postfix_operators=[], prefix_operators=[], qualifier=ClientBuilder, selectors=[MethodInvocation(arguments=[], member=build, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Kubernetes 클러스터에 연결되었습니다.\")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"클러스터 내부 인증 실패, 외부 구성으로 시도합니다: \"), operandr=MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), TryStatement(block=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"kube_config.yaml\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=ClassPathResource, sub_type=None)), name=resource)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ClassPathResource, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[], member=exists, postfix_operators=[], prefix_operators=[], qualifier=resource, selectors=[], type_arguments=None), else_statement=IfStatement(condition=BinaryOperation(operandl=MemberReference(member=kubeconfigPath, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=client, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=defaultClient, postfix_operators=[], prefix_operators=[], qualifier=ClientBuilder, selectors=[], type_arguments=None)), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"기본 kubeconfig를 로드했습니다.\")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=client, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MethodInvocation(arguments=[ClassCreator(arguments=[MemberReference(member=kubeconfigPath, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=FileReader, sub_type=None))], member=loadKubeConfig, postfix_operators=[], prefix_operators=[], qualifier=KubeConfig, selectors=[], type_arguments=None)], member=kubeconfig, postfix_operators=[], prefix_operators=[], qualifier=ClientBuilder, selectors=[MethodInvocation(arguments=[], member=build, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), label=None), StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"지정된 경로에서 kubeconfig를 로드했습니다: \"), operandr=MemberReference(member=kubeconfigPath, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)])), label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getInputStream, postfix_operators=[], prefix_operators=[], qualifier=resource, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=InputStreamReader, sub_type=None)), name=reader)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=InputStreamReader, sub_type=None)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=client, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[MethodInvocation(arguments=[MemberReference(member=reader, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=loadKubeConfig, postfix_operators=[], prefix_operators=[], qualifier=KubeConfig, selectors=[], type_arguments=None)], member=kubeconfig, postfix_operators=[], prefix_operators=[], qualifier=ClientBuilder, selectors=[MethodInvocation(arguments=[], member=build, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"클래스패스에서 kube_config.yaml을 로드했습니다.\")], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None)]))], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"모든 인증 방법 실패, 최후의 방법으로 defaultClient 시도: \"), operandr=MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=ex, selectors=[], type_arguments=None), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None), label=None), StatementExpression(expression=Assignment(expressionl=MemberReference(member=client, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=getDefaultApiClient, postfix_operators=[], prefix_operators=[], qualifier=io.kubernetes.client.openapi.Configuration, selectors=[], type_arguments=None)), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=ex, types=['Exception']))], finally_block=None, label=None, resources=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)",
                "StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=client, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setDefaultApiClient, postfix_operators=[], prefix_operators=[], qualifier=io.kubernetes.client.openapi.Configuration, selectors=[], type_arguments=None), label=None)",
                "ReturnStatement(expression=ClassCreator(arguments=[MemberReference(member=client, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=CoreV1Api, sub_type=None)), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "kubeconfigPath",
              "type": "String"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\config\\K8sConfig.java",
      "dependencies": [
        {
          "type": "import",
          "target": "io.kubernetes.client.openapi.ApiClient"
        },
        {
          "type": "import",
          "target": "io.kubernetes.client.openapi.apis.CoreV1Api"
        },
        {
          "type": "import",
          "target": "io.kubernetes.client.util.ClientBuilder"
        },
        {
          "type": "import",
          "target": "io.kubernetes.client.util.KubeConfig"
        },
        {
          "type": "import",
          "target": "org.springframework.beans.factory.annotation.Value"
        },
        {
          "type": "import",
          "target": "org.springframework.context.annotation.Bean"
        },
        {
          "type": "import",
          "target": "org.springframework.context.annotation.Configuration"
        },
        {
          "type": "import",
          "target": "org.springframework.core.io.ClassPathResource"
        },
        {
          "type": "import",
          "target": "java.io.FileReader"
        },
        {
          "type": "import",
          "target": "java.io.IOException"
        },
        {
          "type": "import",
          "target": "java.io.InputStreamReader"
        }
      ]
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\config\\SchedulerConfig.java": {
      "package": "com.example.gpu_dashboard.config",
      "imports": [
        "com.example.gpu_dashboard.service.PodService",
        "org.slf4j.Logger",
        "org.slf4j.LoggerFactory",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.context.annotation.Configuration",
        "org.springframework.scheduling.annotation.EnableScheduling",
        "org.springframework.scheduling.annotation.Scheduled",
        "java.util.Arrays",
        "java.util.List"
      ],
      "classes": [
        {
          "name": "SchedulerConfig",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "updatePodInfo",
              "return_type": null,
              "parameters": [],
              "code": [
                "StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Scheduled pod info update started\")], member=info, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)",
                "ForStatement(body=BlockStatement(label=None, statements=[TryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=listPods, postfix_operators=[], prefix_operators=[], qualifier=podService, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Updated pod info for namespace: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Failed to update pod info for namespace {}: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None)], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)]), control=EnhancedForControl(iterable=MemberReference(member=monitoredNamespaces, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=namespace)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))), label=None)",
                "StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Scheduled pod info update completed\")], member=info, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "logger",
              "type": "Logger"
            },
            {
              "name": "podService",
              "type": "PodService"
            },
            {
              "name": "monitoredNamespaces",
              "type": "List"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\config\\SchedulerConfig.java",
      "dependencies": [
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.service.PodService",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\service\\PodService.java"
        },
        {
          "type": "import",
          "target": "org.slf4j.Logger"
        },
        {
          "type": "import",
          "target": "org.slf4j.LoggerFactory"
        },
        {
          "type": "import",
          "target": "org.springframework.beans.factory.annotation.Autowired"
        },
        {
          "type": "import",
          "target": "org.springframework.context.annotation.Configuration"
        },
        {
          "type": "import",
          "target": "org.springframework.scheduling.annotation.EnableScheduling"
        },
        {
          "type": "import",
          "target": "org.springframework.scheduling.annotation.Scheduled"
        },
        {
          "type": "import",
          "target": "java.util.Arrays"
        },
        {
          "type": "import",
          "target": "java.util.List"
        }
      ]
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\controller\\PodController.java": {
      "package": "com.example.gpu_dashboard.controller",
      "imports": [
        "com.example.gpu_dashboard.dto.DeletePodRequest",
        "com.example.gpu_dashboard.dto.DeletePodResponseDto",
        "com.example.gpu_dashboard.dto.NamespaceDto",
        "com.example.gpu_dashboard.dto.PodResponseDto",
        "com.example.gpu_dashboard.dto.PodUpdateUserDto",
        "com.example.gpu_dashboard.service.PodService",
        "org.slf4j.Logger",
        "org.slf4j.LoggerFactory",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.web.bind.annotation.PostMapping",
        "org.springframework.web.bind.annotation.RequestBody",
        "org.springframework.web.bind.annotation.RestController",
        "java.util.Collections"
      ],
      "classes": [
        {
          "name": "PodController",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getPods",
              "return_type": "PodResponseDto",
              "parameters": [
                {
                  "name": "request",
                  "type": "NamespaceDto"
                }
              ],
              "code": [
                "TryStatement(block=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getNamespace, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), name=namespace)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Received namespace request: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=listPods, postfix_operators=[], prefix_operators=[], qualifier=podService, selectors=[], type_arguments=None), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Error getting pods: \"), MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=ClassCreator(arguments=[MethodInvocation(arguments=[], member=emptyList, postfix_operators=[], prefix_operators=[], qualifier=Collections, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodResponseDto, sub_type=None)), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * 특정 네임스페이스의 Pod 목록을 조회하고 DB에 저장\n     * @param request 네임스페이스 정보를 담은 DTO\n     * @return Pod 정보 목록을 담은 응답 DTO\n     */"
            },
            {
              "name": "getPodsFromDb",
              "return_type": "PodResponseDto",
              "parameters": [
                {
                  "name": "request",
                  "type": "NamespaceDto"
                }
              ],
              "code": [
                "TryStatement(block=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getNamespace, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), name=namespace)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Received DB query request for namespace: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=getPodsFromDb, postfix_operators=[], prefix_operators=[], qualifier=podService, selectors=[], type_arguments=None), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Error getting pods from DB: \"), MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=ClassCreator(arguments=[MethodInvocation(arguments=[], member=emptyList, postfix_operators=[], prefix_operators=[], qualifier=Collections, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodResponseDto, sub_type=None)), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * 특정 네임스페이스의 Pod 목록을 DB에서 조회\n     * @param request 네임스페이스 정보를 담은 DTO\n     * @return Pod 정보 목록을 담은 응답 DTO\n     */"
            },
            {
              "name": "deletePod",
              "return_type": "DeletePodResponseDto",
              "parameters": [
                {
                  "name": "request",
                  "type": "DeletePodRequest"
                }
              ],
              "code": [
                "TryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 삭제 요청 - namespace: {}, podName: {}\"), MethodInvocation(arguments=[], member=getNamespace, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPodName, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None)], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getNamespace, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPodName, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None)], member=deletePod, postfix_operators=[], prefix_operators=[], qualifier=podService, selectors=[], type_arguments=None), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 삭제 중 오류 발생: \"), MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"fail\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DeletePodResponseDto, sub_type=None)), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * 특정 네임스페이스의 Pod를 삭제\n     * @param request Pod 삭제 요청 정보를 담은 DTO (네임스페이스와 Pod 이름 포함)\n     * @return Pod 삭제 결과를 담은 응답 DTO (성공 시 \"success\", 실패 시 \"fail\" 반환)\n     */"
            },
            {
              "name": "updatePod",
              "return_type": "PodResponseDto",
              "parameters": [
                {
                  "name": "request",
                  "type": "PodUpdateUserDto"
                }
              ],
              "code": [
                "StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 사용자 이름 업데이트 요청 - namespace: {}, podName: {}, username: {}\"), MethodInvocation(arguments=[], member=getNamespace, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPodname, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getUsername, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None)], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)",
                "ReturnStatement(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getNamespace, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPodname, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getUsername, postfix_operators=[], prefix_operators=[], qualifier=request, selectors=[], type_arguments=None)], member=updateUsername, postfix_operators=[], prefix_operators=[], qualifier=podService, selectors=[], type_arguments=None), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "podService",
              "type": "PodService"
            },
            {
              "name": "logger",
              "type": "Logger"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\controller\\PodController.java",
      "dependencies": [
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.DeletePodRequest",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\DeletePodRequest.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.DeletePodResponseDto",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\DeletePodResponseDto.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.NamespaceDto",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\NamespaceDto.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.PodResponseDto",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodResponseDto.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.PodUpdateUserDto",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodUpdateUserDto.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.service.PodService",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\service\\PodService.java"
        },
        {
          "type": "import",
          "target": "org.slf4j.Logger"
        },
        {
          "type": "import",
          "target": "org.slf4j.LoggerFactory"
        },
        {
          "type": "import",
          "target": "org.springframework.beans.factory.annotation.Autowired"
        },
        {
          "type": "import",
          "target": "org.springframework.web.bind.annotation.PostMapping"
        },
        {
          "type": "import",
          "target": "org.springframework.web.bind.annotation.RequestBody"
        },
        {
          "type": "import",
          "target": "org.springframework.web.bind.annotation.RestController"
        },
        {
          "type": "import",
          "target": "java.util.Collections"
        }
      ]
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\DeletePodRequest.java": {
      "package": "com.example.gpu_dashboard.dto",
      "imports": [],
      "classes": [
        {
          "name": "DeletePodRequest",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getNamespace",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setNamespace",
              "return_type": null,
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=namespace, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPodName",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setPodName",
              "return_type": null,
              "parameters": [
                {
                  "name": "podName",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=podName, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "namespace",
              "type": "String"
            },
            {
              "name": "podName",
              "type": "String"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\dto\\DeletePodRequest.java",
      "dependencies": []
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\DeletePodResponseDto.java": {
      "package": "com.example.gpu_dashboard.dto",
      "imports": [],
      "classes": [
        {
          "name": "DeletePodResponseDto",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getStatus",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=status, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "status",
              "type": "String"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\dto\\DeletePodResponseDto.java",
      "dependencies": []
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\NamespaceDto.java": {
      "package": "com.example.gpu_dashboard.dto",
      "imports": [],
      "classes": [
        {
          "name": "NamespaceDto",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getNamespace",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setNamespace",
              "return_type": null,
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=namespace, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "namespace",
              "type": "String"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\dto\\NamespaceDto.java",
      "dependencies": []
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodInfoDto.java": {
      "package": "com.example.gpu_dashboard.dto",
      "imports": [],
      "classes": [
        {
          "name": "PodInfoDto",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getNamespace",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPodname",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=podname, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPodstatus",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=podstatus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "getGpuDevices",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "getUsername",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPoduptime",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=poduptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "namespace",
              "type": "String"
            },
            {
              "name": "podname",
              "type": "String"
            },
            {
              "name": "podstatus",
              "type": "String"
            },
            {
              "name": "poduptime",
              "type": "String"
            },
            {
              "name": "gpuDevices",
              "type": "String"
            },
            {
              "name": "username",
              "type": "String"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodInfoDto.java",
      "dependencies": []
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodResponseDto.java": {
      "package": "com.example.gpu_dashboard.dto",
      "imports": [
        "java.util.List"
      ],
      "classes": [
        {
          "name": "PodResponseDto",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getResult",
              "return_type": "List",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=result, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "result",
              "type": "List"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodResponseDto.java",
      "dependencies": [
        {
          "type": "import",
          "target": "java.util.List"
        }
      ]
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodUpdateUserDto.java": {
      "package": "com.example.gpu_dashboard.dto",
      "imports": [],
      "classes": [
        {
          "name": "PodUpdateUserDto",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getNamespace",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setNamespace",
              "return_type": null,
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=namespace, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPodname",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=podname, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setPodname",
              "return_type": null,
              "parameters": [
                {
                  "name": "podname",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=podname, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=podname, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getUsername",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setUsername",
              "return_type": null,
              "parameters": [
                {
                  "name": "username",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=username, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "namespace",
              "type": "String"
            },
            {
              "name": "podname",
              "type": "String"
            },
            {
              "name": "username",
              "type": "String"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodUpdateUserDto.java",
      "dependencies": []
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\entity\\PodInfoEntity.java": {
      "package": "com.example.gpu_dashboard.entity",
      "imports": [
        "jakarta.persistence",
        "java.time.LocalDateTime"
      ],
      "classes": [
        {
          "name": "PodInfoEntity",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "getId",
              "return_type": "Long",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setId",
              "return_type": null,
              "parameters": [
                {
                  "name": "id",
                  "type": "Long"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=id, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=id, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getUsername",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setUsername",
              "return_type": null,
              "parameters": [
                {
                  "name": "username",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=username, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getNamespace",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setNamespace",
              "return_type": null,
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=namespace, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPodName",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setPodName",
              "return_type": null,
              "parameters": [
                {
                  "name": "podName",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=podName, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPodStatus",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=podStatus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setPodStatus",
              "return_type": null,
              "parameters": [
                {
                  "name": "podStatus",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=podStatus, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=podStatus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getGpuDevices",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setGpuDevices",
              "return_type": null,
              "parameters": [
                {
                  "name": "gpuDevices",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=gpuDevices, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getStartDateTime",
              "return_type": "LocalDateTime",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=startDateTime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setStartDateTime",
              "return_type": null,
              "parameters": [
                {
                  "name": "startDateTime",
                  "type": "LocalDateTime"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=startDateTime, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=startDateTime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            },
            {
              "name": "getPodUptime",
              "return_type": "String",
              "parameters": [],
              "code": [
                "ReturnStatement(expression=MemberReference(member=podUptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)"
              ],
              "description": null
            },
            {
              "name": "setPodUptime",
              "return_type": null,
              "parameters": [
                {
                  "name": "podUptime",
                  "type": "String"
                }
              ],
              "code": [
                "StatementExpression(expression=Assignment(expressionl=This(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MemberReference(member=podUptime, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None)]), type==, value=MemberReference(member=podUptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "id",
              "type": "Long"
            },
            {
              "name": "username",
              "type": "String"
            },
            {
              "name": "namespace",
              "type": "String"
            },
            {
              "name": "podName",
              "type": "String"
            },
            {
              "name": "podStatus",
              "type": "String"
            },
            {
              "name": "gpuDevices",
              "type": "String"
            },
            {
              "name": "podUptime",
              "type": "String"
            },
            {
              "name": "startDateTime",
              "type": "LocalDateTime"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\entity\\PodInfoEntity.java",
      "dependencies": [
        {
          "type": "import",
          "target": "jakarta.persistence"
        },
        {
          "type": "import",
          "target": "java.time.LocalDateTime"
        }
      ]
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\repository\\PodInfoRepository.java": {
      "package": "com.example.gpu_dashboard.repository",
      "imports": [
        "com.example.gpu_dashboard.entity.PodInfoEntity",
        "java.util.List",
        "java.util.Optional",
        "org.springframework.data.jpa.repository.JpaRepository"
      ],
      "classes": [],
      "interfaces": [
        {
          "name": "PodInfoRepository",
          "extends": [
            "JpaRepository"
          ],
          "methods": [
            {
              "name": "findByNamespace",
              "return_type": "List",
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                }
              ]
            },
            {
              "name": "findByNamespaceAndPodName",
              "return_type": "Optional",
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                },
                {
                  "name": "podName",
                  "type": "String"
                }
              ]
            }
          ]
        }
      ],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\repository\\PodInfoRepository.java",
      "dependencies": [
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.entity.PodInfoEntity",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\entity\\PodInfoEntity.java"
        },
        {
          "type": "import",
          "target": "java.util.List"
        },
        {
          "type": "import",
          "target": "java.util.Optional"
        },
        {
          "type": "import",
          "target": "org.springframework.data.jpa.repository.JpaRepository"
        }
      ]
    },
    "src\\main\\java\\com\\example\\gpu_dashboard\\service\\PodService.java": {
      "package": "com.example.gpu_dashboard.service",
      "imports": [
        "org.slf4j.Logger",
        "org.slf4j.LoggerFactory",
        "io.kubernetes.client.openapi.apis.CoreV1Api",
        "io.kubernetes.client.openapi.models.V1PodList",
        "org.springframework.beans.factory.annotation.Autowired",
        "org.springframework.stereotype.Service",
        "java.time.Duration",
        "java.time.OffsetDateTime",
        "java.time.ZoneId",
        "java.time.ZonedDateTime",
        "java.util.List",
        "java.util.Optional",
        "java.util.Set",
        "java.util.stream.Collectors",
        "java.util.Collections",
        "com.example.gpu_dashboard.dto.DeletePodResponseDto",
        "com.example.gpu_dashboard.dto.PodInfoDto",
        "com.example.gpu_dashboard.dto.PodResponseDto",
        "com.example.gpu_dashboard.repository.PodInfoRepository",
        "com.example.gpu_dashboard.entity.PodInfoEntity"
      ],
      "classes": [
        {
          "name": "PodService",
          "extends": null,
          "implements": [],
          "methods": [
            {
              "name": "savePodInfo",
              "return_type": null,
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                },
                {
                  "name": "podName",
                  "type": "String"
                },
                {
                  "name": "podStatus",
                  "type": "String"
                },
                {
                  "name": "podUptime",
                  "type": "String"
                },
                {
                  "name": "gpuDevices",
                  "type": "String"
                }
              ],
              "code": [
                "TryStatement(block=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findByNamespace, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), name=existingPods)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), name=existingPod)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[], member=getPodName, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=equals, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=existingPod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MemberReference(member=pod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])), label=None), BreakStatement(goto=None, label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=existingPods, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=pod)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))), label=None), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=existingPod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=ClassCreator(arguments=[], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodInfoEntity, sub_type=None)), name=newPod)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setNamespace, postfix_operators=[], prefix_operators=[], qualifier=newPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPodName, postfix_operators=[], prefix_operators=[], qualifier=newPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=podStatus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPodStatus, postfix_operators=[], prefix_operators=[], qualifier=newPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=podUptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPodUptime, postfix_operators=[], prefix_operators=[], qualifier=newPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setGpuDevices, postfix_operators=[], prefix_operators=[], qualifier=newPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=newPod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=save, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Saved new pod info to DB: {}/{}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)]), label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=podStatus, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPodStatus, postfix_operators=[], prefix_operators=[], qualifier=existingPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=podUptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPodUptime, postfix_operators=[], prefix_operators=[], qualifier=existingPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setGpuDevices, postfix_operators=[], prefix_operators=[], qualifier=existingPod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=existingPod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=save, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Updated pod info in DB: {}/{}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)]))], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Failed to save pod info to DB: {}\"), MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None), MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * Pod 정보를 DB에 저장\n     * @param namespace 네임스페이스\n     * @param podName Pod 이름\n     * @param podStatus Pod 상태\n     * @param podUptime Pod 가동 시간\n     * @param gpuDevices GPU 장치 정보\n     */"
            },
            {
              "name": "listPods",
              "return_type": "PodResponseDto",
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                }
              ],
              "code": [
                "TryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Attempting to list pods in namespace: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[TernaryExpression(condition=BinaryOperation(operandl=MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\"), if_true=MethodInvocation(arguments=[], member=trim, postfix_operators=[], prefix_operators=[], qualifier=namespace, selectors=[], type_arguments=None)), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=false)], member=listNamespacedPod, postfix_operators=[], prefix_operators=[], qualifier=coreV1Api, selectors=[], type_arguments=None), name=podList)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=V1PodList, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Asia/Seoul\")], member=of, postfix_operators=[], prefix_operators=[], qualifier=ZoneId, selectors=[], type_arguments=None), name=koreaZoneId)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ZoneId, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=koreaZoneId, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=now, postfix_operators=[], prefix_operators=[], qualifier=ZonedDateTime, selectors=[], type_arguments=None), name=koreaTime)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=ZonedDateTime, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=toOffsetDateTime, postfix_operators=[], prefix_operators=[], qualifier=koreaTime, selectors=[], type_arguments=None), name=now)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=OffsetDateTime, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Current time (KST): {}\"), MemberReference(member=koreaTime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getItems, postfix_operators=[], prefix_operators=[], qualifier=podList, selectors=[MethodInvocation(arguments=[], member=stream, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[LambdaExpression(body=MethodInvocation(arguments=[], member=getMetadata, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[], member=getName, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), parameters=[MemberReference(member=pod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=map, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[MethodInvocation(arguments=[], member=toSet, postfix_operators=[], prefix_operators=[], qualifier=Collectors, selectors=[], type_arguments=None)], member=collect, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), name=currentPodNames)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None))], dimensions=[], name=Set, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Current pod names: {}\"), MemberReference(member=currentPodNames, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findByNamespace, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), name=dbPods)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getPodName, postfix_operators=[], prefix_operators=[], qualifier=dbPod, selectors=[], type_arguments=None)], member=contains, postfix_operators=[], prefix_operators=['!'], qualifier=currentPodNames, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=dbPod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=delete, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Deleted pod from DB: {}/{}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getPodName, postfix_operators=[], prefix_operators=[], qualifier=dbPod, selectors=[], type_arguments=None)], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=dbPods, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=dbPod)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getItems, postfix_operators=[], prefix_operators=[], qualifier=podList, selectors=[MethodInvocation(arguments=[], member=stream, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[LambdaExpression(body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\"), name=poduptime)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getStatus, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=getStatus, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[], member=getStartTime, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), name=startTime)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=OffsetDateTime, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MemberReference(member=startTime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=startTime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=now, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=between, postfix_operators=[], prefix_operators=[], qualifier=Duration, selectors=[], type_arguments=None), name=duration)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=Duration, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=toDays, postfix_operators=[], prefix_operators=[], qualifier=duration, selectors=[], type_arguments=None), name=days)], modifiers=set(), type=BasicType(dimensions=[], name=long)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=BinaryOperation(operandl=MethodInvocation(arguments=[], member=toHours, postfix_operators=[], prefix_operators=[], qualifier=duration, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=24), operator=%), name=hours)], modifiers=set(), type=BasicType(dimensions=[], name=long)), StatementExpression(expression=Assignment(expressionl=MemberReference(member=poduptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"%dd %dh\"), MemberReference(member=days, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=hours, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=format, postfix_operators=[], prefix_operators=[], qualifier=String, selectors=[], type_arguments=None)), label=None)]))])), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getMetadata, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"unknown\"), if_true=MethodInvocation(arguments=[], member=getMetadata, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[], member=getName, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), name=podName)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=TernaryExpression(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getStatus, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), if_false=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"unknown\"), if_true=MethodInvocation(arguments=[], member=getStatus, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[], member=getPhase, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), name=podPhase)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\"), name=gpuDevices)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getSpec, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operandr=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getSpec, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[], member=getContainers, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), operator=&&), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=getSpec, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[], member=getContainers, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[], member=stream, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[LambdaExpression(body=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Not GPU\"), name=device)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), IfStatement(condition=BinaryOperation(operandl=MethodInvocation(arguments=[], member=getEnv, postfix_operators=[], prefix_operators=[], qualifier=container, selectors=[], type_arguments=None), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), operator=!=), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=Assignment(expressionl=MemberReference(member=device, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), type==, value=MethodInvocation(arguments=[], member=getEnv, postfix_operators=[], prefix_operators=[], qualifier=container, selectors=[MethodInvocation(arguments=[], member=stream, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[LambdaExpression(body=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[MethodInvocation(arguments=[MethodInvocation(arguments=[], member=getName, postfix_operators=[], prefix_operators=[], qualifier=envVar, selectors=[], type_arguments=None)], member=equals, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], value=\"NVIDIA_VISIBLE_DEVICES\"), parameters=[MemberReference(member=envVar, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=filter, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[LambdaExpression(body=MethodInvocation(arguments=[], member=getValue, postfix_operators=[], prefix_operators=[], qualifier=envVar, selectors=[], type_arguments=None), parameters=[MemberReference(member=envVar, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=map, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[], member=findFirst, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Not GPU\")], member=orElse, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), label=None)])), ReturnStatement(expression=MemberReference(member=device, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], parameters=[MemberReference(member=container, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=map, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\", \")], member=joining, postfix_operators=[], prefix_operators=[], qualifier=Collectors, selectors=[], type_arguments=None)], member=collect, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None)), label=None)])), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podPhase, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=poduptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=savePodInfo, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"\"), name=username)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=String, sub_type=None)), ReturnStatement(expression=ClassCreator(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podPhase, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=poduptime, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=gpuDevices, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodInfoDto, sub_type=None)), label=None)], parameters=[MemberReference(member=pod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=map, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[MethodInvocation(arguments=[], member=toList, postfix_operators=[], prefix_operators=[], qualifier=Collectors, selectors=[], type_arguments=None)], member=collect, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), name=podInfos)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=PodInfoDto, sub_type=None))], dimensions=[], name=List, sub_type=None)), ReturnStatement(expression=ClassCreator(arguments=[MemberReference(member=podInfos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodResponseDto, sub_type=None)), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Failed to list pods in namespace '{}': {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None), MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ThrowStatement(expression=MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * 특정 네임스페이스의 모든 Pod 목록을 조회\n     * @param namespace 조회할 네임스페이스\n     * @return PodResponseDto Pod 정보 목록을 포함한 응답 객체\n     * @throws Exception API 호출 실패시 발생\n     */"
            },
            {
              "name": "getPodsFromDb",
              "return_type": "PodResponseDto",
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                }
              ],
              "code": [
                "TryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Retrieving pod info from DB for namespace: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findByNamespace, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), name=podEntities)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[], member=stream, postfix_operators=[], prefix_operators=[], qualifier=podEntities, selectors=[MethodInvocation(arguments=[LambdaExpression(body=ClassCreator(arguments=[MethodInvocation(arguments=[], member=getNamespace, postfix_operators=[], prefix_operators=[], qualifier=entity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPodName, postfix_operators=[], prefix_operators=[], qualifier=entity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPodStatus, postfix_operators=[], prefix_operators=[], qualifier=entity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getPodUptime, postfix_operators=[], prefix_operators=[], qualifier=entity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getGpuDevices, postfix_operators=[], prefix_operators=[], qualifier=entity, selectors=[], type_arguments=None), MethodInvocation(arguments=[], member=getUsername, postfix_operators=[], prefix_operators=[], qualifier=entity, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodInfoDto, sub_type=None)), parameters=[MemberReference(member=entity, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])])], member=map, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None), MethodInvocation(arguments=[MethodInvocation(arguments=[], member=toList, postfix_operators=[], prefix_operators=[], qualifier=Collectors, selectors=[], type_arguments=None)], member=collect, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), name=podInfos)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=PodInfoDto, sub_type=None))], dimensions=[], name=List, sub_type=None)), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Retrieved {} pod records from DB for namespace: {}\"), MethodInvocation(arguments=[], member=size, postfix_operators=[], prefix_operators=[], qualifier=podInfos, selectors=[], type_arguments=None), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=ClassCreator(arguments=[MemberReference(member=podInfos, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodResponseDto, sub_type=None)), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Failed to retrieve pod info from DB for namespace '{}': {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None), MemberReference(member=e, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=ClassCreator(arguments=[MethodInvocation(arguments=[], member=emptyList, postfix_operators=[], prefix_operators=[], qualifier=Collections, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodResponseDto, sub_type=None)), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * DB에서 특정 네임스페이스의 Pod 정보 조회\n     * @param namespace 조회할 네임스페이스\n     * @return PodResponseDto Pod 정보 목록을 포함한 응답 객체\n     */"
            },
            {
              "name": "deletePod",
              "return_type": "DeletePodResponseDto",
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                },
                {
                  "name": "podName",
                  "type": "String"
                }
              ],
              "code": [
                "TryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 삭제 시도 - namespace: {}, podName: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=30), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Background\"), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=null)], member=deleteNamespacedPod, postfix_operators=[], prefix_operators=[], qualifier=coreV1Api, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Deleted\")], member=updatePodStatusInDb, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 삭제 완료\")], member=info, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"success\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DeletePodResponseDto, sub_type=None)), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 삭제 실패 - namespace: {}, podName: {}, error: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None)], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=ClassCreator(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"fail\")], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=DeletePodResponseDto, sub_type=None)), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * 특정 Pod 삭제\n     * @param namespace 조회할 pod 네임스페이스\n     * @param podName 삭제할 Pod 이름\n     * @return DeletePodResponseDto 삭제 결과를 포함한 응답 객체\n     */"
            },
            {
              "name": "updatePodStatusInDb",
              "return_type": null,
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                },
                {
                  "name": "podName",
                  "type": "String"
                },
                {
                  "name": "status",
                  "type": "String"
                }
              ],
              "code": [
                "TryStatement(block=[LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findByNamespace, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), name=existingPods)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))], dimensions=[], name=List, sub_type=None)), ForStatement(body=BlockStatement(label=None, statements=[IfStatement(condition=MethodInvocation(arguments=[], member=getPodName, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=equals, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=status, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setPodStatus, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=pod, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=save, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 상태 업데이트: {}/{} -> {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=status, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), BreakStatement(goto=None, label=None)]))]), control=EnhancedForControl(iterable=MemberReference(member=existingPods, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), var=VariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=None, initializer=None, name=pod)], modifiers=set(), type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))), label=None)], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 상태 업데이트 실패: {}/{} -> {}, error: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=status, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None)], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)"
              ],
              "description": "/**\n     * DB에서 Pod 상태 업데이트\n     * @param namespace 네임스페이스\n     * @param podName Pod 이름\n     * @param status 새 상태\n     */"
            },
            {
              "name": "updateUsername",
              "return_type": "PodResponseDto",
              "parameters": [
                {
                  "name": "namespace",
                  "type": "String"
                },
                {
                  "name": "podName",
                  "type": "String"
                },
                {
                  "name": "username",
                  "type": "String"
                }
              ],
              "code": [
                "TryStatement(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 사용자 이름 업데이트 시도 - namespace: {}, podName: {}, username: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=debug, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None), LocalVariableDeclaration(annotations=[], declarators=[VariableDeclarator(dimensions=[], initializer=MethodInvocation(arguments=[MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=findByNamespaceAndPodName, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), name=pod)], modifiers=set(), type=ReferenceType(arguments=[TypeArgument(pattern_type=None, type=ReferenceType(arguments=None, dimensions=[], name=PodInfoEntity, sub_type=None))], dimensions=[], name=Optional, sub_type=None)), IfStatement(condition=MethodInvocation(arguments=[], member=isPresent, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[], type_arguments=None), else_statement=None, label=None, then_statement=BlockStatement(label=None, statements=[StatementExpression(expression=MethodInvocation(arguments=[], member=get, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[MethodInvocation(arguments=[MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[])], member=setUsername, postfix_operators=None, prefix_operators=None, qualifier=None, selectors=None, type_arguments=None)], type_arguments=None), label=None), StatementExpression(expression=MethodInvocation(arguments=[MethodInvocation(arguments=[], member=get, postfix_operators=[], prefix_operators=[], qualifier=pod, selectors=[], type_arguments=None)], member=save, postfix_operators=[], prefix_operators=[], qualifier=podInfoRepository, selectors=[], type_arguments=None), label=None)]))], catches=[CatchClause(block=[StatementExpression(expression=MethodInvocation(arguments=[Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=\"Pod 사용자 이름 업데이트 실패: {}/{} -> {}, error: {}\"), MemberReference(member=namespace, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=podName, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=username, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MethodInvocation(arguments=[], member=getMessage, postfix_operators=[], prefix_operators=[], qualifier=e, selectors=[], type_arguments=None)], member=error, postfix_operators=[], prefix_operators=[], qualifier=logger, selectors=[], type_arguments=None), label=None)], label=None, parameter=CatchClauseParameter(annotations=None, modifiers=None, name=e, types=['Exception']))], finally_block=None, label=None, resources=None)",
                "ReturnStatement(expression=ClassCreator(arguments=[MethodInvocation(arguments=[], member=emptyList, postfix_operators=[], prefix_operators=[], qualifier=Collections, selectors=[], type_arguments=None)], body=None, constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=PodResponseDto, sub_type=None)), label=None)"
              ],
              "description": null
            }
          ],
          "fields": [
            {
              "name": "logger",
              "type": "Logger"
            },
            {
              "name": "coreV1Api",
              "type": "CoreV1Api"
            },
            {
              "name": "podInfoRepository",
              "type": "PodInfoRepository"
            }
          ]
        }
      ],
      "interfaces": [],
      "path": "C:/Users/kimtaehyeong/workspace/gpu_pod_dashboard\\src\\main\\java\\com\\example\\gpu_dashboard\\service\\PodService.java",
      "dependencies": [
        {
          "type": "import",
          "target": "org.slf4j.Logger"
        },
        {
          "type": "import",
          "target": "org.slf4j.LoggerFactory"
        },
        {
          "type": "import",
          "target": "io.kubernetes.client.openapi.apis.CoreV1Api"
        },
        {
          "type": "import",
          "target": "io.kubernetes.client.openapi.models.V1PodList"
        },
        {
          "type": "import",
          "target": "org.springframework.beans.factory.annotation.Autowired"
        },
        {
          "type": "import",
          "target": "org.springframework.stereotype.Service"
        },
        {
          "type": "import",
          "target": "java.time.Duration"
        },
        {
          "type": "import",
          "target": "java.time.OffsetDateTime"
        },
        {
          "type": "import",
          "target": "java.time.ZoneId"
        },
        {
          "type": "import",
          "target": "java.time.ZonedDateTime"
        },
        {
          "type": "import",
          "target": "java.util.List"
        },
        {
          "type": "import",
          "target": "java.util.Optional"
        },
        {
          "type": "import",
          "target": "java.util.Set"
        },
        {
          "type": "import",
          "target": "java.util.stream.Collectors"
        },
        {
          "type": "import",
          "target": "java.util.Collections"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.DeletePodResponseDto",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\DeletePodResponseDto.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.PodInfoDto",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodInfoDto.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.dto.PodResponseDto",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\dto\\PodResponseDto.java"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.repository.PodInfoRepository"
        },
        {
          "type": "import",
          "target": "com.example.gpu_dashboard.entity.PodInfoEntity",
          "file": "src\\main\\java\\com\\example\\gpu_dashboard\\entity\\PodInfoEntity.java"
        }
      ]
    }
  }
}